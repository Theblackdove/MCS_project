@startuml PoliceCentral

hide empty members
skinparam Shadowing false
skinparam classAttributeIconSize 0
skinparam ClassBorderThickness 0.5
skinparam groupInheritance 5
skinparam class {
	BackgroundColor AntiqueWhite
	ArrowColor Black
	BorderColor Black
}
skinparam defaultTextAlignment center

class System
{
}

class World
{
	+World() : World
	+Run()
}

class PoliceCentral
{
	-patroleLocations : map  to :: 
	-tasks : seq...
	-busy : bool
	-dists : seq of ID
	-tempId : ID
	+addPatrole(Patrole)
	+Step()
	+distances(map  to, ::) : seq of ID
	+addTask(ID, ::, TaskType, Time, Time)
	-getTask() : *...
	-findRightPatrole(map  to, TaskType, ::) : [ID]
	-closestPatrole(set of Patrole, ::) : ID
	-distToTask(::, ::) : real
	-sqrt(real, real) : real
	+isFinished() : bool
}

class Global
{
	+taskPriority : map TaskType to Priority <<value>>
	+patrolePriority : map PatroleType to  <<value>>
	+Time : nat <<type>>
	+ID : nat <<type>>
	+Priority : nat <<type>>
	+Coordinates : ::  <<type>>
	+Task : ::  <<type>>
	+PatroleType : |... <<type>>
	+TaskType : |... <<type>>
	+String : seq of char <<type>>
}

class Environment
{
	+inline : *...  <<type>>
	#outline : *...  <<type>>
	-inlines : seq of inline
	-outlines : seq of outline
	-taskId : [ID]
	-busy : bool
	+Environment(String) : Environment
	+Run()
	-createSignal() : [ID]
	+handleTask(ID, [PatroleType], [:: ], TaskType, ::, [real], Time)
	+showResult()
	+isFinished() : bool
}

class Patrole
{
	-patroleId : ID
	-p_type : PatroleType
	-location : :: 
	-currentPriority : Priority
	-distToTask : [real]
	-curTask : [:: ]
	-TaskDoneTime : Time
	-vacant : bool
	-busy : bool
	+Patrole(ID, PatroleType, ::) : Patrole
	+Step()
	+addTask(ID, ::, TaskType, real, Time, Time)
	-sendPatrole(::)
	+isFinished() : bool
	+set_patroleId(ID)
	+get_patroleId() : ID
	+set_location(::)
	+get_location() : :: 
	+get_patroleType() : PatroleType
	+set_currentPriority(Priority)
	+get_currentPriority() : Priority
	+setDistToTask(real)
	+set_vacancy(bool)
	+get_vacancy() : bool
}

class IO
{
	+filedirective : <append> | <start> <<type>>
	+writeval(@p) : bool <<function>>
	+fwriteval(seq1 of char, @p, filedirective) : bool <<function>>
	+freadval(seq1 of char) : bool * [@p] <<function>>
	+echo(seq of char) : bool
	+fecho(seq of char, seq of char, [filedirective]) : bool
	+ferror() : seq of char
	+print(?)
	+println(?)
	+printf(seq of char, seq of ?)
}

class MATH
{
	+sin(real) : real <<function>>
	+cos(real) : real <<function>>
	+tan(real) : real <<function>>
	+cot(real) : real <<function>>
	+asin(real) : real <<function>>
	+acos(real) : real <<function>>
	+atan(real) : real <<function>>
	+acot(real) : real <<function>>
	+sqrt(real) : real <<function>>
	+pi_f() : real <<function>>
	+srand(int)
	+rand(int) : int
	+srand2(int) : int
	+exp(real) : real <<function>>
	+ln(real) : real <<function>>
	+log(real) : real <<function>>
	+fac(nat) : nat1 <<function>>
	+pi : real <<value>>
	-euler : real <<value>>
}

class Timer
{
	-currentTime : nat
	-stepLength : nat <<value>>
	-Timer() : Timer
	+GetInstance() : Timer
	+StepTime()
	+GetTime() : nat
}

System --> PoliceCentral : +policeCentral
System --> Patrole : +patrole1
Global <|-- System
World --> Environment : +env
World --> Timer : +timerRef
PoliceCentral "[nat]" --> Patrole : -patroles
Global <|-- PoliceCentral
Environment --> IO : -io
Global <|-- Environment
Global <|-- Patrole
Timer --> Timer : -timerInstance

@enduml