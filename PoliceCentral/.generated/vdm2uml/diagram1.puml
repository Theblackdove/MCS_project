@startuml PoliceCentral

hide empty members
hide fields
hide IO methods 
skinparam Shadowing false
skinparam classAttributeIconSize 0
skinparam ClassBorderThickness 0.5
skinparam groupInheritance 5
skinparam class {
	BackgroundColor AntiqueWhite
	ArrowColor Black
	BorderColor Black
}
skinparam defaultTextAlignment center

class Global
{
	+taskPriority : map TaskType to Priority <<value>>
	+patrolePriority : map PatroleType to  <<value>>
	+Time : nat <<type>>
	+ID : nat <<type>>
	+Priority : nat <<type>>
	+Coordinates : ::  <<type>>
	+Task : ::  <<type>>
	+PatroleType : <PatroleA> | <PatroleB> | <PatroleC> | <PatroleD> <<type>>
	+TaskType : <TaskA> | <TaskB> | <TaskC> | <TaskD> <<type>>
	+String : seq of char <<type>>
}

class World
{
	+World() : World
	+Run()
}

class Environment
{
	+inline : *...  <<type>>
	#outline : *...  <<type>>
	-inlines : seq of inline
	-outlines : seq of outline
	-taskId : [ID]
	-busy : bool
	+Environment(String) : Environment
	+Run()
	-createSignal() : [ID]
	+handleTask(Task, [PatroleType], [Coordinates], [real])
	+showResult()
	+isFinished() : bool
}


	class PoliceCentral
	{
		-patroleLocations : map  to Coordinates 
		-tasks : seq of Task 
		-busy : bool
		+addPatrole(Patrole)
		+addMultiplePatroles(set of Patrole)
		+Step()
		-closestPatrole(map  to Coordinates, TaskType, Coordinates) : [ID]
		-distToTask(Coordinates, Coordinates) : real
		-sqrt(real, real) : real
		+addTask(ID, Coordinates, TaskType, Time, Time)
		-getTask() : Task 
		+isFinished() : bool
		-printPatroleStatus()
		-printTask(Task)
	}

	class Patrole
	{
		-p_type : PatroleType
		-p_loc : Coordinates 
		-currentPriority : Priority
		-distToTask : [real]
		-curTask : [Task]
		-TaskDoneTime : Time
		-busy : bool
		+Patrole(PatroleType, Coordinates) : Patrole
		+Step()
		+addTask(Task, real)
		-sendPatrole(Coordinates)
		+isFinished() : bool
		+set_location(Coordinates)
		+get_location() : Coordinates 
		+get_patroleType() : PatroleType
		+set_currentPriority(Priority)
		+get_currentPriority() : Priority
		+get_curTask() : [Task]
		+setDistToTask(real)
	}




class IO
{
	+filedirective : <append> | <start> <<type>>
	+writeval(@p) : bool <<function>>
	+fwriteval(seq1 of char, @p, filedirective) : bool <<function>>
	+freadval(seq1 of char) : bool * [@p] <<function>>
	+echo(seq of char) : bool
	+fecho(seq of char, seq of char, [filedirective]) : bool
	+ferror() : seq of char
	+print(?)
	+println(?)
	+printf(seq of char, seq of ?)
}

class Timer
{
	+currentTime : nat
	-stepLength : nat <<value>>
	-Timer() : Timer
	+GetInstance() : Timer
	+StepTime()
	+GetTime() : nat
}

class System
{
}

System "1" --> "1" PoliceCentral : +policeCentral
System "1" --> "*" Patrole : +patrole 1,\n\npatrole 2,\n.\n.\n.\npatrole n
Global <|-- System
World "1" --> "0...1" Environment : +env
World "1" --> "1" Timer : +timerRef
PoliceCentral "[nat]" --> Patrole : -patroles
PoliceCentral "1" --> "1" IO : +io
Global <|-- PoliceCentral
Environment "1" --> "1" IO : +io
Global <|-- Environment
Global <|-- Patrole
Timer "1" --> "1" Timer : -timerInstance


@enduml