class PoliceCentral is subclass of Global

values

instance variables
    
    -- links to Patroles
    patroleLocations : map nat to Coordinates := {|->};
    patroles         : map nat to Patrole := {|->};
    inv dom patroleLocations = dom patroles;
    
    -- Store the tasks arriving from the environment
    tasks : seq of (ID * Coordinates * TaskType * Time * Time) := [];
    
    -- Status of the instantiated class
    busy : bool := false;

    --activePatroles: set of Patrole := {}; 
    
    dists : seq of ID := [];

functions

operations
    
    -- Operation that add a new patrole. Used by class World
    public addPatrole: Patrole ==> ()
    addPatrole(pPatrole) ==
        (   
            dcl pId : nat := card dom patroles + 1;
            atomic
            (
                patroleLocations := patroleLocations munion {pId |-> pPatrole.get_location()};
                --patroleLocations := patroleLocations munion {pPatrole.get_patroleId() |-> pPatrole.get_location()};
                patroles := patroles munion {pId |-> pPatrole};  
                --patroles := patroles munion {pPatrole.get_patroleId() |-> pPatrole};  
            )
        );

    public addMultiplePatroles: set of Patrole ==> ()
    addMultiplePatroles(sPatrole) ==
        (   
            for all p in set sPatrole do
            (    
                dcl pId : nat := card dom patroles + 1;
                atomic
                (
                    patroleLocations := patroleLocations munion {pId |-> p.get_location()};
                    --patroleLocations := patroleLocations munion {pPatrole.get_patroleId() |-> pPatrole.get_location()};
                    patroles := patroles munion {pId |-> p};  
                    --patroles := patroles munion {pPatrole.get_patroleId() |-> pPatrole};  
                )
            );
        );

    public Step: () ==> ()
    Step() ==
        (
            if 
                tasks <> []
            then
                let
                    -- Load in task
                    mk_(taskId, pTaskCoord, pTaskType, pTime, pTaskDuration) = getTask(),
                    -- Finds the id of the closest patrole in PatroleDB. 
                    id = closestPatrole(patroles, pTaskType, pTaskCoord)  
                in
                (
                    if
                        id <> nil
                    then
                    (   
                        -- Calculate distance from patrole to task 
                        dcl dist : real := distToTask(patroles(id).get_location(), pTaskCoord);
                        -- Add task to given patrole
                        patroles(id).addTask(taskId, pTaskCoord, pTaskType, dist, pTime, pTaskDuration);
                    )
                    else
                    (   
                        -- No Available patroles found 
                        World`env.handleTask(taskId, nil, nil, pTaskType, pTaskCoord, nil, pTime);
                        World`env.io.print("No vacant Patroles\n")    
                    )  
                );         
            busy := len tasks > 0;
            
            for all id in set dom patroles do 
                patroles(id).Step()
        );
    
    /* public distances: (map nat to Patrole) * Coordinates ==> seq of ID
    distances(mPatroles, pTaskCoord) ==
        (   
            --dcl temp : seq of real := [],
            dcl temp : seq of real := [distToTask(mPatroles(i).get_location(),pTaskCoord) | i in set dom mPatroles],
                res  : seq of ID := [];
            
            --for all id in set dom mPatroles do 
            --    temp := temp ^ [distToTask(mPatroles(id).get_location(), pTaskCoord)];
            
            while not len res = card dom mPatroles do
            (
                let 
                    d1 in set inds temp be st forall d2 in set inds temp & temp(d1) <= temp(d2)
                in
                (
                    res := res ^ [d1];--[{temp(d1) |-> d1}];--[temp(d1)];
                    temp := temp ++ {d1 |-> 1000} -- 1000 SO THIS IS A HACK!!!! :-)  
                )
            );
            return res   
        )
        post forall res in set elems RESULT & res in set dom patroles; */
    
     -- Operation that finds the closest patrole wrt. a given task.
    private closestPatrole: map nat to Patrole * TaskType * Coordinates ==> [ID]
    closestPatrole(sPatroles, pTaskType, pTaskCoord) ==
        (   
            dcl temp : set of nat := dom sPatroles;
            while temp <> {} do
            (
                let
                    -- Finds the closest patrole in temporary patroleDB
                    id1 in set temp be st forall id2 in set temp
                    & distToTask(sPatroles(id1).get_location(), pTaskCoord) <= distToTask(sPatroles(id2).get_location(), pTaskCoord)
                in
                    if 
                        taskPriority(pTaskType) > sPatroles(id1).get_currentPriority() and 
                        patrolePriority(sPatroles(id1).get_patroleType()) >= taskPriority(pTaskType)
                    then
                        return id1
                    else
                        -- Remove the closest patrole from temporary patroleDB 
                        temp := temp \ {id1}
            );
            return nil
        )
    pre sPatroles <> {|->}
    post RESULT in set dom patroles or RESULT = nil; -- Possibly redundant?? 
     

    -- Operation that returns the distance between a patrole and a task
    private distToTask: Coordinates * Coordinates ==> real
    distToTask(pPatroleCoord, pTaskCoord) ==
        (
            let
                r : real = (pPatroleCoord.x - pTaskCoord.x)**2 + (pPatroleCoord.y - pTaskCoord.y)**2,
                res : real = sqrt(r, 0.005) 
            in
                return res
        );

    -- Operation to approximate the square root of real number with error, e.
    -- From book, VDM-10 Language Manual (p. 123) 
    private sqrt: real * real ==> real
    sqrt(r,e) ==
        (
            if r = 0
            then return 0
            else 
            (
                dcl x: real := 1,
                nextx: real := r;
                while abs(x-nextx) >= e * r  do
                    (
                        x := nextx;
                        nextx := ((r / x) + x) / 2;
                    );
                return nextx
            )
        )
    pre r >= 0;

    public addTask:  ID * Coordinates * TaskType * Time * Time ==> ()
    addTask (pId, pCoord, pTaskType, pTime, pTaskDuration) == 
        (
            tasks := tasks ^ [mk_(pId, pCoord, pTaskType, pTime, pTaskDuration)];
            busy := true
        );
    
    private getTask: () ==> ID * Coordinates * TaskType * Time * Time
    getTask() ==
        (
            dcl res : ID * Coordinates * TaskType * Time * Time := hd tasks;
            tasks := tl tasks;
            return res
        );

    public isFinished: () ==> bool
    isFinished () ==
        return forall id in set dom patroles &
            patroles(id).isFinished();

end PoliceCentral

    /* public Step: () ==> ()
    Step() ==
        (
            if 
                tasks <> []
            then
                let
                    mk_(taskId, pTaskCoord, pTaskType, pTime) = getTask()
                in
                (
                    for all id in set dom patroleLocations do
                        let 
                            dist : real = distToTask(patroleLocations(id), pTaskCoord) 
                        in 
                        (   
                            if 
                                -- Check if patrole is in range 
                                dist < RANGE and   
                                -- Check if priority of new task is higher than patrole's current priority
                                taskPriority(pTaskType) > patroles(id).get_currentPriority() and 
                                -- Check if PatroleType and TaskType match
                                patrolePriority(patroles(id).get_patroleType()) >= taskPriority(pTaskType)
                            then
                            (
                                -- Add Task to patrole
                                patroles(id).addTask(taskId, pTaskCoord, pTaskType, dist, pTime);
                                -- Set new location for patrole (overriding)
                                patroleLocations := patroleLocations ++ {id |-> pTaskCoord}
                            );
                        );        
                );
            busy := len tasks > 0;
            
            for all id in set dom patroles do 
                patroles(id).Step()
        ); */

    /*     private closestPatrole: (map nat to Patrole) * Coordinates ==> Patrole
    closestPatrole(pPatrole, taskLocation) ==
        -- is not yet specified;
        let
            p1 in set rng pPatrole be st forall p2 in set rng pPatrole 
            & distToTask(p1.get_location(), taskLocation) <= distToTask(p2.get_location(), taskLocation)
        in
            return (p1); */
        --pre sPatroles <> {};
    
    /*                     for all i in set activePatroles do
                        if

                        --taskPriority(pTaskType) > p.get_currentPriority() and 
                        --patrolePriority(p.get_patroleType()) >= taskPriority(pTaskType)
                        then
                        (  -- Add Task to patrole
                            dcl id : ID := p.get_patroleId();
                            patroles(id).addTask(taskId, pTaskCoord, pTaskType, dist, pTime);
                            -- Set new location for patrole (overriding)
                            patroleLocations := patroleLocations ++ {id |-> pTaskCoord}
                        ); */


 /* -- Operation that returns the set of patroles that match given taskType
    private findRightPatrole: (map nat to Patrole) * TaskType ==> set of Patrole --()--set of (map nat to Patrole)
    findRightPatrole(mPatroles, pTaskType) ==
        (
            return {x | x in set rng mPatroles & patrolePriority(x.get_patroleType()) >= taskPriority(pTaskType)
                        and taskPriority(pTaskType) >= x.get_currentPriority() and x.get_vacancy() = true}
        )
        pre mPatroles <> {|->} and pTaskType in set dom taskPriority
        post forall x in set RESULT & x.get_patroleType() in set dom patrolePriority; */

    /* public Step: () ==> ()
    Step() ==
        (
            if 
                tasks <> []
            then
                let
                    -- Load in task
                    mk_(taskId, pTaskCoord, pTaskType, pTime, pTaskDuration) = getTask(),
                    -- Find the right set of patroles
                    --sPatroles = findRightPatrole(patroles, pTaskType),
                    id = findRightPatrole(patroles, pTaskType, pTaskCoord)
                    -- Find the closest patrole of previous set
                    --p = closestPatrole(sPatroles, pTaskCoord),
                    -- Calculate distance to task
                    --dist : real = distToTask(p.get_location(), pTaskCoord) 
                    --dist : real = distToTask(patroles(id).get_location(), pTaskCoord) 
                in
                (
                    --dcl id : ID := p.get_patroleId();
                    --Add task to patrole
                    if
                        id = 0
                        --patroles(id).get_currentPriority() = taskPriority(pTaskType) or id = 0
                    then
                        -- Send empty result to World`env
                        World`env.handleTask(taskId, <None>, mk_Coordinates(0,0), pTaskType, pTaskCoord,0, 0)
                    else 
                    (
                        dcl dist : real := distToTask(patroles(id).get_location(), pTaskCoord); 
                        patroles(id).addTask(taskId, pTaskCoord, pTaskType, dist, pTime, pTaskDuration);
                        -- Set new location for patrole (overriding)
                        patroleLocations := patroleLocations ++ {id |-> pTaskCoord} -- Maybe move to Patrole classes instead????
                    )   
                );           
            busy := len tasks > 0;
            
            for all id in set dom patroles do 
                patroles(id).Step()
        ); */