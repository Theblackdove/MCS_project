class Patrole is subclass of GLOBAL

values

types

instance variables
p_type           : PatroleType;
p_loc            : Coordinates;
currentPriority  : Priority := 0;
distToTask       : [real] := nil;
curTask          : [Task] := nil;
    
TaskDoneTime     : Time := 0;
busy             : bool := false;

operations
    -- Class constructor
public Patrole: PatroleType * Coordinates ==> Patrole
Patrole(pType, pCoord) ==
(
    p_type := pType;
    p_loc := pCoord;
);

public Step: () ==> ()
Step() ==
(
    dcl newtime : Time := World`timerRef.GetTime();
    if
        busy = true 
    then
    (
        sendPatrole(curTask);
        set_location(curTask.t_loc);
    );
    if 
        newtime = TaskDoneTime
    then
    (
        curTask := nil;
        distToTask := nil;
        TaskDoneTime := 0;
        currentPriority := 0;
    );
    busy := false
);


public addTask: Task * real ==> ()
addTask(pTask, pDist) ==
(
    curTask := pTask;
    distToTask := pDist;
    TaskDoneTime := curTask.t_time + curTask.t_duration;
    set_currentPriority(taskPriority(curTask.t_type));
    busy := true;
);

private sendPatrole: Task ==> ()
sendPatrole(pTask) == 
    --World`env.handleTask(pTask.t_id, p_type, p_loc, pTask.t_type, pTask.t_loc, distToTask, pTask.t_time);
    World`env.handleTask(pTask, p_type, p_loc, distToTask);
    --public handleTask: [Task * PatroleType * Coordinates * real] ==> ()

public isFinished: () ==> bool
isFinished () == 
    return not busy;
    
-----------------------------------------------------------------------------
-- Class specific set/get operations 
-----------------------------------------------------------------------------    
    public set_location: Coordinates ==> ()
    set_location(pLoc) == 
        p_loc := pLoc; 

    pure public get_location: () ==> Coordinates
    get_location() == 
        return p_loc;

    pure public get_patroleType: () ==> PatroleType
    get_patroleType() == 
        return p_type;

    public set_currentPriority: Priority ==> ()
    set_currentPriority(pCurrent) == 
        currentPriority := pCurrent;

    pure public get_currentPriority: () ==> Priority
    get_currentPriority() == 
        return currentPriority;

    public get_curTask: () ==> [Task]
    get_curTask() ==
        return curTask;
    
    public setDistToTask: real ==> ()
    setDistToTask(pdist) ==
        distToTask := pdist;

end Patrole