class Patrole is subclass of Global

values

types

instance variables
    patroleId        : ID;
    p_type           : PatroleType;
    location         : Coordinates;
    currentPriority  : Priority := 0;
    distToTask       : [real] := nil;
    curTask          : [Task] := nil;
    
    TaskDoneTime     : Time := 0;
    busy             : bool := false;

operations
    -- Class constructor
    public Patrole:  ID * PatroleType * Coordinates ==> Patrole
    Patrole(pId, pType, pCoord) ==
    (
        patroleId := pId;
        p_type := pType;
        location := pCoord;
    );

    public Step: () ==> ()
    Step() ==
        (
            dcl newtime : Time := World`timerRef.GetTime();
            if
                busy = true 
            then
            (
                sendPatrole(curTask);
                set_location(curTask.coord);
            );
            if 
                newtime = TaskDoneTime
            then
            (
                curTask := nil;
                distToTask := nil;
                TaskDoneTime := 0;
                currentPriority := 0;
            );
            busy := false
        );


    public addTask: ID * Coordinates * TaskType * real * Time * Time ==> ()
    addTask(pId, pTaskCoord, pTaskType, pDist, pTime, pDuration) ==
    (
        curTask := mk_Task(pId, pTaskCoord, pTaskType, pTime, pDuration);
        distToTask := pDist;
        TaskDoneTime := pTime + pDuration;
        set_currentPriority(taskPriority(pTaskType));
        busy := true;
    );

    private sendPatrole: Task ==> ()
    sendPatrole(pTask) == 
        World`env.handleTask(pTask.id, p_type, location, pTask.type, pTask.coord, distToTask, pTask.time);

    public isFinished: () ==> bool
    isFinished () == 
        return not busy;
    
-----------------------------------------------------------------------------
-- Class specific set/get operations 
-----------------------------------------------------------------------------
    public set_patroleId: ID ==> ()
    set_patroleId(pId) ==
        patroleId := pId;

    pure public get_patroleId: () ==> ID
    get_patroleId() ==
        return patroleId; 
    
    public set_location: Coordinates ==> ()
    set_location(pLoc) == 
        location := pLoc; 

    pure public get_location: () ==> Coordinates
    get_location() == 
        return location;

    pure public get_patroleType: () ==> PatroleType
    get_patroleType() == 
        return p_type;

    public set_currentPriority: Priority ==> ()
    set_currentPriority(pCurrent) == 
        currentPriority := pCurrent;

    pure public get_currentPriority: () ==> Priority
    get_currentPriority() == 
        return currentPriority;
    
    public setDistToTask: real ==> ()
    setDistToTask(pdist) ==
        distToTask := pdist;

end Patrole